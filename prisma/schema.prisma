generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  id                 Int                  @id @default(autoincrement())
  username           String               @unique
  password           String
  count              Int
  logo               String?
  type               String?
  CompanyName        String?
  name               String?
  location           String?
  email              String?
  phone              String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  lastSignIn         DateTime             @default(now())
  sessionRevokedAt   DateTime?
  ConnectionHistory  connectionhistory[]
  jewelers           jeweler[]
  products           products[]
  SalfHistory        salfhistory[]
  Slaf               slaf[]
  TransactionHistory transactionhistory[]
  auction            auction[]            @relation("userauctions")
}

model connectionhistory {
  id        Int      @id @default(autoincrement())
  userId    Int
  loginTime DateTime @default(now())
  ipAddress String?
  user      user     @relation(fields: [userId], references: [id])

  @@index([userId], map: "connectionhistory_userId_fkey")
}

model products {
  id                 Int                  @id @default(autoincrement())
  code               String
  model              String?
  origin             String?
  carat              String?
  weight             String?
  status             String
  userId             Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  jewelerId          Int?
  date               DateTime?
  guaranteeId        Int?
  OrderHistory       orderhistory[]
  Guarantee          guarantee?           @relation(fields: [guaranteeId], references: [id])
  Jeweler            jeweler?             @relation(fields: [jewelerId], references: [id])
  user               user                 @relation(fields: [userId], references: [id])
  TransactionHistory transactionhistory[]

  @@index([guaranteeId], map: "products_guaranteeId_fkey")
  @@index([jewelerId], map: "products_jewelerId_fkey")
  @@index([userId], map: "products_userId_fkey")
}

model supplier {
  id                  Int            @id @default(autoincrement())
  name                String?
  contact             String?
  userId              Int
  formattedSupplierId String         @unique
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  note                String?        @db.VarChar(10000)
  advance             String?
  price               String?
  orders              order[]        @relation("SupplierOrders")
  OrderHistory        orderhistory[]
}

model order {
  id                  Int            @id @default(autoincrement())
  name                String?
  model               String?
  origin              String?
  carat               String?
  weight              String?
  status              Boolean
  userId              Int
  quantity            Int?
  supplierId          Int?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  formattedOrderId    String         @unique
  formattedSupplierId String?
  note                String?        @db.VarChar(10000)
  advance             String?
  price               String?
  image               String?
  clientCode          String?
  clientid            Int?
  months              String?
  client              client?        @relation(fields: [clientid], references: [id])
  supplier            supplier?      @relation("SupplierOrders", fields: [supplierId], references: [id], onDelete: Cascade)
  OrderHistory        orderhistory[]

  @@index([clientid], map: "order_clientid_fkey")
  @@index([supplierId], map: "order_supplierId_fkey")
}

model orderhistory {
  id         Int       @id @default(autoincrement())
  orderId    Int
  productId  Int?
  supplierId Int?
  action     String
  timestamp  DateTime  @default(now())
  amount     String?
  order      order     @relation(fields: [orderId], references: [id])
  product    products? @relation(fields: [productId], references: [id])
  supplier   supplier? @relation(fields: [supplierId], references: [id], onDelete: Cascade)

  @@index([orderId], map: "orderhistory_orderId_fkey")
  @@index([productId], map: "orderhistory_productId_fkey")
  @@index([supplierId], map: "orderhistory_supplierId_fkey")
}

model client {
  id         Int         @id @default(autoincrement())
  name       String?
  phone      String?
  location   String?
  clientCode String      @unique
  userId     Int
  createdAt  DateTime?   @default(now())
  updatedAt  DateTime?   @updatedAt
  guarantee  guarantee[]
  orders     order[]
  savings    saving[]
}

model saving {
  id                 Int             @id @default(autoincrement())
  name               String
  location           String?
  phone              String
  amount             Int
  status             Boolean
  userId             Int
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  UserSavingSequence String          @unique
  clientCode         String?
  clientid           Int?
  note               String?         @db.VarChar(10000)
  client             client?         @relation(fields: [clientid], references: [id])
  SavingHistory      savinghistory[]

  @@index([clientid], map: "saving_clientid_fkey")
}

model savinghistory {
  id        Int      @id @default(autoincrement())
  action    String
  savingId  Int
  userId    Int
  details   String
  createdAt DateTime @default(now())
  saving    saving   @relation(fields: [savingId], references: [id], onDelete: Cascade)

  @@index([savingId], map: "savinghistory_savingId_fkey")
}

model guarantee {
  id                   Int                @id @default(autoincrement())
  name                 String?
  phone                String?
  selectedComponent    String
  price                Int?
  advance              String?
  months               String?
  note                 String?            @db.VarChar(10000)
  status               String?
  userId               Int
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  formattedGuaranteeId String             @unique
  clientCode           String?
  clientid             Int?
  tableData            facilitated[]
  client               client?            @relation(fields: [clientid], references: [id])
  guaranteehistory     guaranteehistory[]
  rows                 products[]

  @@index([clientid], map: "guarantee_clientid_fkey")
}

model facilitated {
  id          Int       @id @default(autoincrement())
  date        DateTime
  checkNumber String
  amount      String
  status      Boolean
  guaranteeId Int
  guarantee   guarantee @relation(fields: [guaranteeId], references: [id], onDelete: Cascade)

  @@index([guaranteeId], map: "facilitated_guaranteeId_fkey")
}

model type {
  id     Int    @id @default(autoincrement())
  name   String
  userId Int?
}

model provenance {
  id   Int    @id @default(autoincrement())
  name String @unique
}

model carat {
  id    Int @id @default(autoincrement())
  value Int @unique
}

model jeweler {
  id                 Int                  @id @default(autoincrement())
  name               String
  phone              String?
  image              String?
  storeName          String?
  userId             Int
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  user               user                 @relation(fields: [userId], references: [id])
  Products           products[]
  SalfHistory        salfhistory[]
  Slaf               slaf[]
  TransactionHistory transactionhistory[]

  @@index([userId], map: "jeweler_userId_fkey")
}

model slaf {
  id          Int           @id @default(autoincrement())
  code        String?
  userId      Int
  jewelerId   Int
  amount      String?
  note        String?       @db.VarChar(10000)
  unit        String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  SalfHistory salfhistory[]
  jeweler     jeweler       @relation(fields: [jewelerId], references: [id])
  user        user          @relation(fields: [userId], references: [id])

  @@index([jewelerId], map: "slaf_jewelerId_fkey")
  @@index([userId], map: "slaf_userId_fkey")
}

model salfhistory {
  id        Int      @id @default(autoincrement())
  slafId    Int
  userId    Int
  jewelerId Int
  value     String?
  note      String?  @db.VarChar(10000)
  action    String
  createdAt DateTime @default(now())
  jeweler   jeweler  @relation(fields: [jewelerId], references: [id])
  slaf      slaf     @relation(fields: [slafId], references: [id])
  user      user     @relation(fields: [userId], references: [id])

  @@index([jewelerId], map: "salfhistory_jewelerId_fkey")
  @@index([slafId], map: "salfhistory_slafId_fkey")
  @@index([userId], map: "salfhistory_userId_fkey")
}

model transactionhistory {
  id        Int      @id @default(autoincrement())
  productId Int
  jewelerId Int
  userId    Int
  note      String?  @db.VarChar(10000)
  status    String
  date      DateTime @default(now())
  jeweler   jeweler  @relation(fields: [jewelerId], references: [id])
  product   products @relation(fields: [productId], references: [id])
  user      user     @relation(fields: [userId], references: [id])

  @@index([jewelerId], map: "transactionhistory_jewelerId_fkey")
  @@index([productId], map: "transactionhistory_productId_fkey")
  @@index([userId], map: "transactionhistory_userId_fkey")
}

model auction {
  id           Int       @id @default(autoincrement())
  title        String
  carat        Decimal   @db.Decimal(10, 2)
  weight       Decimal   @db.Decimal(10, 2)
  type         String
  description  String?   @db.VarChar(1000)
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  startPrice   Decimal   @db.Decimal(10, 2)
  currentPrice Decimal   @db.Decimal(10, 2)
  nameBid      String?
  pictures     Json?
  timer        DateTime?
  status       String
  participate  Int?
  userId       Int?
  user         user[]    @relation("userauctions")
}

model guaranteehistory {
  id          Int       @id @default(autoincrement())
  guaranteeId Int
  amount      Decimal
  action      String
  timestamp   DateTime  @default(now())
  guarantee   guarantee @relation(fields: [guaranteeId], references: [id], map: "GuaranteeHistory_guaranteeId_fkey")

  @@index([guaranteeId], map: "GuaranteeHistory_guaranteeId_fkey")
}

model userclientsequence {
  userId  Int @id
  lastSeq Int @default(0)
}

model userguaranteesequence {
  userId  Int @id
  lastSeq Int @default(0)
}

model userordersequence {
  userId  Int @id
  lastSeq Int @default(0)
}

model userproductsequence {
  id      Int @id @default(autoincrement())
  userId  Int @unique(map: "userProductSequence_userId_key")
  lastSeq Int
}

model usersavingsequence {
  userId  Int @id
  lastSeq Int @default(0)
}

model userslafsequence {
  id      Int @id @default(autoincrement())
  userId  Int @unique(map: "userSlafSequence_userId_key")
  lastSeq Int
}

model usersuppliersequence {
  userId  Int @id
  lastSeq Int @default(0)
}
